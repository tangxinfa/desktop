#!/usr/bin/env bash

notification_id=389361729

if [ -z "${BLUETOOTH_HEADSET_DEVICE}" ]; then
  echo "error: BLUETOOTH_HEADSET_DEVICE environment variable not set" >>/dev/stderr
  exit 1
fi

headset_connected() {
  bluetoothctl info | grep -F 'Connected: yes' >/dev/null
}

headset_set_profile() {
  local index=$(pacmd list-cards | grep -E '(^\s+index:)|(^\s+device.string)' | grep -B 1 $BLUETOOTH_HEADSET_DEVICE | head -1 | awk -F': ' '{print $2}')
  pacmd set-card-profile $index a2dp_sink
}

headset_connect() {
  dunstify -r ${notification_id} -u low -t 60000 -i audio-headset '○ Headset' 'Connecting'
  local delay=1
  if bluetooth | grep 'bluetooth = off' >/dev/null; then
    delay=3
  fi
  bluetooth on
  sleep $delay
  bluetoothctl power on
  sleep $delay
  local repaired=0
  local output
  for ((i = 1; i <= 10; i++)); do
    echo "bluetoothctl connect '${BLUETOOTH_HEADSET_DEVICE} ...'" >>/dev/stderr
    output=$(bluetoothctl connect "${BLUETOOTH_HEADSET_DEVICE}")
    if [ "$?" = "0" ]; then
      break
    elif [[ $output == *"Device"*"not available"* ]] && [[ $repaired == "0" ]]; then
      echo "${output}, repair by toggle on bluetooth ..." >>/dev/stderr
      bluetooth off
      bluetooth on
      repaired=1
    fi
    sleep $delay
  done
  if headset_connected; then
    dunstify -r $notification_id -u normal -t 3000 -i audio-headset '✔ Headset' 'Connect succeed'
    headset_set_profile
  else
    dunstify -r $notification_id -u critical -t 3000 -i audio-headset '✘ Headset' 'Connect failed'
  fi
}

headset_disconnect() {
  dunstify -r ${notification_id} -u low -t 60000 -i audio-headset '○ Headset' 'Disconnecting'
  bluetoothctl disconnect
  if headset_connected; then
    dunstify -r ${notification_id} -u normal -t 3000 -i audio-headset '✔ Headset' 'Disconnect failed'
  else
    dunstify -r ${notification_id} -u critical -t 3000 -i audio-headset '✘ Headset' 'Disconnect succeed'
  fi
}

case "${1}" in
  status)
    if headset_connected; then
      echo "connected"
    else
      echo "disconnected"
    fi
    ;;
  connect)
    if ! headset_connected; then
      headset_connect
    fi
    ;;
  disconnect)
    if headset_connected; then
      headset_disconnect
    fi
    ;;
  toggle)
    if headset_connected; then
      headset_disconnect
    else
      headset_connect
    fi
    ;;
  *)
    echo -e "usage: ${0} <status|connect|disconnect|toggle>\n\n\tstatus      Headset connect status.\n\tconnect     Connect headset.\n\tdisconnect  Disconnect headset.\n\ttoggle      Headset connect/disconnect." >>/dev/stderr
    exit 1
    ;;
esac
