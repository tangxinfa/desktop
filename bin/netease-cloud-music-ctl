#!/usr/bin/env bash

notification_id=100791699

if [ -z "$DISPLAY" ]; then
  export DISPLAY=$(~/bin/tty-ctl graphic-display)
fi

state() {
  output=$(pacmd list-sink-inputs | grep -E 'state: |application.id = "netease-cloud-music"' | sed -e 's/[[:space:]]//' | tr '\n' ',')
  if [[ $output =~ .*state:[[:space:]]*CORKED\,[[:space:]]*application\.id[[:space:]]*\=[[:space:]]*\"netease-cloud-music\".* ]]; then
    echo "paused"
    return 1
  elif [[ $output =~ .*state:[[:space:]]*RUNNING\,[[:space:]]*application\.id[[:space:]]*\=[[:space:]]*\"netease-cloud-music\".* ]]; then
    echo "running"
    return 0
  else
    echo "unknown"
    return -1
  fi
}

volume_set() {
  volume_default=40
  volume_left=$(amixer sget Master | grep 'Left:' | awk -F'[][]' '{ print $2 }' | awk -F% '{print $1}')
  volume_right=$(amixer sget Master | grep 'Right:' | awk -F'[][]' '{ print $2 }' | awk -F% '{print $1}')
  status_left=$(amixer sget Master | grep -E 'Left:.*\[on\]$' >/dev/null && echo on || echo off)
  status_right=$(amixer sget Master | grep -E 'Right:.*\[on\]$' >/dev/null && echo on || echo off)
  echo "Volume left ${volume_left} ${status_left} right ${volume_right} ${status_right}, restore to default volume ${volume_default}" >>/dev/stderr
  amixer --quiet set Master "${volume_default}%"
  if [ "${status_left}" = "off" ] && [ "${status_right}" = "off" ]; then
    dunstify -r $notification_id -u critical -t 5000 -i audio-volume-muted-symbolic.symbolic '🛈 Please Unmute Audio Volume' >/dev/stderr
  fi
}

notification() {
  if [ "$(~/bin/bluetooth-headset-ctl status)" = "connected" ]; then
    playing_icon=""
    paused_icon=""
  else
    playing_icon=""
    paused_icon=""
  fi
  state
  if [ "$?" = "0" ]; then
    volume_set
    dunstify -r $notification_id -u normal -t 3000 -i netease-cloud-music "${playing_icon} Netease Cloud Music" "Playing" >/dev/stderr
  elif [ "$?" = "1" ]; then
    dunstify -r $notification_id -u critical -t 3000 -i netease-cloud-music "${paused_icon} Netease Cloud Music" "Paused" >/dev/stderr
  fi
}

terminate() {
  killall -9 netease-cloud-music
}

toggle() {
  state_old=$(state)
  if ! pidof netease-cloud-music >/dev/null; then
    dex /usr/share/applications/netease-cloud-music.desktop
    for ((i = 1; i <= 10; i++)); do
      sleep 1
      if pidof netease-cloud-music >/dev/null; then
        sleep 1
        break
      fi
    done
  fi
  for ((i = 1; i <= 10; i++)); do
    # netease-cloud-music's default key binding is ctrl+alt+p,
    # but i want to use it in Emacs, so change to ctrl+alt+shift+p.
    xdotool key ctrl+alt+shift+p
    sleep 1
    if [ $(state) != "$state_old" ]; then
      break
    fi
  done
}

auto_pause() {
  SCRIPT_PATH=$(readlink "${BASH_SOURCE[0]}")
  if [ -z "$SCRIPT_PATH" ]; then
    SCRIPT_PATH="${BASH_SOURCE[0]}"
  fi
  SCRIPT_NAME=$(basename "${SCRIPT_PATH}")
  LOCK_FILE="/tmp/${SCRIPT_NAME}.lock"

  if [ -z "$NETEASE_CLOUD_MUSIC_LOCKED" ]; then
    touch "${LOCK_FILE}"
    export NETEASE_CLOUD_MUSIC_LOCKED="${LOCK_FILE}"
    exec flock -x -n -o "${LOCK_FILE}" -c "${SCRIPT_PATH} auto-pause"
    exit $?
  fi
  REQUIRE_TERMINATE=0
  while [ 1 ]; do
    STATUS=$(~/bin/bluetooth-headset-ctl status)
    STATE=$(state)
    if [ "$STATUS" = "disconnected" ] && [ "$STATE" = "running" ] && [ "`at-place`" != "home" ]; then
      if [ "${REQUIRE_TERMINATE}" = "1" ]; then
        terminate
      else
        toggle
      fi
      notification
      REQUIRE_TERMINATE=1
    else
      REQUIRE_TERMINATE=0
    fi
    sleep 10
  done
}

case "${1}" in
  status)
    state
    ;;
  resume)
    if [ $(state) != "running" ]; then
      toggle
      notification
    fi
    ;;
  pause)
    if [ $(state) = "running" ]; then
      toggle
      notification
    fi
    ;;
  toggle)
    toggle
    notification
    ;;
  auto-pause)
    auto_pause
    ;;
  *)
    echo -e "usage: ${0} <status|pause|resume|toggle|auto-pause>\n\n\tstatus      Show play status.\n\tpause       Pause play.\n\tresume      Resume play.\n\ttoggle      Toggle play.\n\tauto-pause  Auto pause if bluetooth headset disconnected." >/dev/stderr
    exit 1
    ;;
esac
